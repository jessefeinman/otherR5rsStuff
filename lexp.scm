(define (atom? exp)
  (cond ((and (not (pair? exp))
              (not (null? exp)))
                     #t)
        (else #f)))

(define (not? exp)
  (cond ((and (eq? (car exp) 'NOT)
              (not (null? (cdr exp)))
              (null? (cdr (cdr exp))))
                     #t)
        (else #f)))

(define (and? exp)
  (cond ((eq? (car exp) 'AND) #t)
        (else #f)))

(define (or? exp)
  (cond ((eq? (car exp) 'OR) #t)
        (else #f)))

(define (andOr? exp)
  (cond ((and (not (null? (cdr exp)))
              (not (null? (cdr (cdr exp))))
              (null? (cdr (cdr (cdr exp))))
              (or (and? exp) (or? exp)) #t))
        (else #f)))

(define (lexp? exp)
  (cond ((atom? exp)  #t)
        ((not? exp)   (and (lexp? (car (cdr exp)))))
        ((andOr? exp) (and (lexp? (car (cdr exp))) (lexp? (car (cdr (cdr exp))))))
        (else #f)))

(define (lookup sym los)
  (cond ((null? los) '())
        ((eq? sym (car (car los))) (bin->bool (car (cdr (car los)))))
        (else (lookup sym (cdr los)))))

(define (bin->bool num)
  (cond ((eq? num 0) #f)
        (else #t)))

(define (checkSyms exp los)
    (cond ((atom? exp)  (cond ((not (null? (lookup exp los))) #t)
                              (else exp)))
          ((not? exp)   (and (checkSyms (car (cdr exp)) los)))
          ((andOr? exp) (and (checkSyms (car (cdr exp)) los) (checkSyms (car (cdr (cdr exp))) los)))
          (else #f)))

(define (replaceSyms exp los)
  (cond ((not (covered? exp los)) '())
        ((not (boolean? (covered? exp los))) (covered? exp los))
        ((atom? exp)(lookup exp los))
        ((not? exp) (not (replaceSyms (car (cdr exp)) los)))
        ((and? exp) (and (replaceSyms (car (cdr exp)) los) (replaceSyms (car (cdr (cdr exp))) los)))
        ((or? exp)  (or (replaceSyms (car (cdr exp)) los) (replaceSyms (car (cdr (cdr exp))) los)))))

(define (covered? exp los)
  (cond ((not (lexp? exp)) #f)
        ((boolean? (checkSyms exp los)) #t)
        (else (checkSyms exp los))))

(replaceSyms '(AND l1 (OR l2 (NOT (AND l3 (NOT l5))))) '((l1 0) (l2 0) (l3 0) (l4 0)))